# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
# image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
# cache:
#   paths:
#     - .cache/pip
#     - env/

.test:
  # https://forum.gitlab.com/t/is-there-a-way-to-not-run-pipeline-when-merge-request-is-created/63039
  # https://stackoverflow.com/questions/70654510/how-to-run-pipeline-after-merge-request-approved-in-gitlab-ci
  rules: 
    #- if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    #  when: never
    - if: '$CI_MERGE_REQUEST_APPROVED'
    - elif: '$CI_PIPELINE_SOURCE == "push"'
  script:
#    - apt-get update
#    - apt-get -q -q -y install g++
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv env
    - source env/bin/activate
    - pip install .
    - pip install coverage
    - pip install pytest
      #    - coverage run --source rumdpy -m unittest discover -s tests
      #    - coverage report -m
    - python3 tests_ci/test_LJ_cpu.py
    - python3 tests_ci/test_LJ_gpu.py
  artifacts:
    paths:
      - .coverage
  coverage: '/^TOTAL.+?(\d+\%)$/'

# For some unexplicable reason, this fails 
# test:3.7:
#   image: python:3.7
#   extends: .test

test:3.9:
  image: python:3.9
  extends: .test
  
test:3.10:
  image: python:3.10
  extends: .test

test:3.11:
  image: python:3.11
  extends: .test
  
test:3.12:
  image: python:3.12
  extends: .test

