# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
# image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
# cache:
#   paths:
#     - .cache/pip
#     - env/

default:
  image: nvidia/cuda:12.6.0-devel-ubuntu22.04

.test_environment: &test_environment
    - echo "deb https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy main\ndeb-src https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy main" > /etc/apt/sources.list.d/python-deadsnake.list
    - apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F23C5A6CF475977595C89F51BA6932366A755776
    - apt-get update

    - echo 'tzdata tzdata/Areas select Europe' | debconf-set-selections
    - echo 'tzdata tzdata/Zones/Europe select Copenhagen' | debconf-set-selections
    - DEBIAN_FRONTEND="noninteractive" apt install -y tzdata

    - apt install -y "$PYTHON_VERSION" "$PYTHON_VERSION-dev" "$PYTHON_VERSION-venv"
    - update-alternatives --install /usr/bin/python3 python3 "/usr/bin/$PYTHON_VERSION" 1
    - update-alternatives --set python3 "/usr/bin/$PYTHON_VERSION"

    # Python versions 3.10 and 3.11 have system packages, which prevent installation of "ensurepip" module
    - if [[ "$PYTHON_VERSION" == "python3.10" || "$PYTHON_VERSION" == "python3.11" ]]; then apt install -y python3-pip; else python3 -m ensurepip --upgrade; fi

    - python3 -V
    - python3 -m pip install virtualenv
    - virtualenv env
    - source env/bin/activate
    - python3 -m pip install .
    - python3 -m pip install coverage
    - python3 -m pip install matplotlib
    - python3 -m pip install pytest
    - python3 -m pip install pytest-cov
    - python3 -m pip install ipywidgets
    - python3 -m pip install k3d
    - python3 -m pip install scipy
    - python3 -m pip install sympy

.test_runs: &test_runs
      #    - coverage run --source rumdpy -m unittest discover -s tests
      #    - coverage report -m
    - python3 -m pytest --doctest-modules --cov-report term --cov-report html --cov=rumdpy
    - python3 tests_ci/test_LJ_cpu.py
    - python3 tests_ci/test_LJ_gpu.py
  # https://forum.gitlab.com/t/is-there-a-way-to-not-run-pipeline-when-merge-request-is-created/63039
  # https://stackoverflow.com/questions/70654510/how-to-run-pipeline-after-merge-request-approved-in-gitlab-ci

.test_config:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
  artifacts:
    paths:
      - .coverage
  coverage: '/^TOTAL.+?(\d+\%)$/'

# For some unexplicable reason, this fails 
# test:3.7:
#   image: python:3.7
#   extends: .test

test:3.10:
  extends: .test_config
  variables:
    PYTHON_VERSION: "python3.10"
  script:
    - *test_environment
    - *test_runs

test:3.11:
  extends: .test_config
  variables:
    PYTHON_VERSION: "python3.11"
  script:
    - *test_environment
    - *test_runs

test:3.12:
  extends: .test_config
  variables:
    PYTHON_VERSION: "python3.12"
  script:
    - *test_environment
    - *test_runs

